include: "dexom_python/cluster_utils/snakemake_utils.smk"

rule end:
    input:
        final_output

rule approach_1:
    input:
        expand(cluspath+"div_enum_{parallel}_solutions.csv", parallel=get_parallel())
    output:
        outputs[1]

rule approach_1_batch:
    input:
        prevsol
    output:
        outpath + "div_enum_{parallel}_solutions.csv"
    params:
        rxn_range = lambda w: str(clus['enum_iterations']*int(w.parallel)) + '_' + str(clus['enum_iterations']*(int(w.parallel)+1))
        dist_anneal = lambda w: (1 - 1 / (clus['batch_num'] * 2 * (clus['batch_div_sols'] / 10))) ** int(w.parallel)
    shell:
        "python dexom_python/enum_functions/rxn_enum_functions.py -m %s -r %s -r {params.rxn_range} -o %srxn_enum_{wildcards.parallel} -p %s %s --save" %
        (config['model'], config['reaction-weights'], outpath, prevsol, rlstring),
        "python dexom_python/enum_functions/diversity_enum_functions.py -m %s -r %s -a {params.dist_anneal} -o %sdiv_enum_{wildcards.parallel} -p %srxn_enum_{wildcards.parallel}_solution_0.csv %s" %
        (config['model'], config['reaction-weights'], outpath, prevsol, fullstring)

rule approach_2:
    input:
        prevsol
    output:
        outputs[2]


rule approach_3:
    input:
        prevsol
    output:
        outputs[3]

rule concat_solutions:
    input:
        #### DEFINE input!
    output:
        outpath+"all_DEXOM_solutions.csv",
        outpath+"activation_frequency_reactions.csv"
    log:
        "logs/solution_compilation.log"
    shell:
        "python cluster_utils/solution_compilation.py -" #### DEFINE the match pattern

rule div_enum:
    input:
        config['model'],
        config['reaction_weights']
    output:
        outpath+"div_enum_{parallel}_solutions.csv"
        outputs["div"]
    params:
        dist_anneal = lambda w: (1 - 1 / (clus['batch_num'] * 2 * (clus['batch_div_sols'] / 10))) ** int(w.parallel)
    log:
        "logs/div_enum_{parallel}.log"
    shell:
        "python dexom_python/enum_functions/diversity_enum_functions.py -m %s -r %s -a {params.dist_anneal} -o %sdiv_enum_{wildcards.parallel} -p %s %s" %
        (config['model'], config['reaction-weights'], outpath, prevsol, fullstring)

rule rxn_enum:
    input:
        config['model'],
        config['reaction_weights']
    output:
        outpath+"rxn_enum_{parallel}_solutions.csv"
    params:
        rxn_range = lambda w: str(clus['enum_iterations']*int(w.parallel)) + '_' + str(clus['enum_iterations']*(int(w.parallel)+1))
    log:
        "logs/rxn_enum_{parallel}.log"
        outputs["rxn"]
    shell:
        "python dexom_python/enum_functions/rxn_enum_functions.py -m %s -r %s -r {params.rxn_range} -o %srxn_enum_{wildcards.parallel} -p %s %s" %
        (config['model'], config['reaction-weights'], outpath, prevsol, rlstring)

rule icut_enum:
    input:
        config['model'],
        config['reaction_weights']
    output:
        outpath+"icut_enum_{parallel}_solutions.csv"
        outputs["icut"]
    log:
        "logs/icut_enum_{parallel}.log"
    shell:
        "python dexom_python/enum_functions/icut_functions.py -m %s -r %s -r {params.rxn_range} -o %sicut_enum_{wildcards.parallel} -p %s %s" %
        (config['model'], config['reaction-weights'], outpath, prevsol, fullstring)

rule maxdist_enum:
    input:
        config['model'],
        config['reaction_weights']
    output:
        outpath+"maxdist_enum_{parallel}_solutions.csv"
        outputs["max"]
    log:
        "logs/maxdist_enum_{parallel}.log"
    shell:
        "python dexom_python/enum_functions/maxdist_functions.py -m %s -r %s -r {params.rxn_range} -o %smaxdist_enum_{wildcards.parallel} -p %s %s" %
        (config['model'], config['reaction-weights'], outpath, prevsol, fullstring)

rule imat:
    input:
        config['model'],
        config['reaction_weights']
    output:
        outpath+"imat_solution.csv"
    log:
        "logs/imat.log"
    shell:
        "python dexom_python/imat_functions.py -m %s -r %s -o %simat_solution" %
        (config['model'], config['reaction-weights'], outpath)
